{"version":3,"sources":["components/Button/Button.module.css","components/TaskCounter/TaskCounter.module.css","components/TaskForm/TaskForm.module.css","components/TaskList/TaskList.module.css","components/Layout/Layout.module.css","components/StatusFilter/StatusFilter.module.css","components/Layout/Layout.js","components/Button/Button.js","redux/constants.js","redux/selectors.js","redux/filterSlice.js","components/StatusFilter/StatusFilter.js","components/TaskCounter/TaskCounter.js","components/AppBar/AppBar.js","redux/tasksSlice.js","components/TaskForm/TaskForm.js","components/Task/Task.js","components/TaskList/TaskList.js","components/App.js","redux/store.js","index.js","components/AppBar/AppBar.module.css","components/Task/Task.module.css"],"names":["module","exports","Layout","_ref","children","_jsx","className","css","container","Button","selected","type","otherProps","clsx","btn","isSelected","statusFilters","Object","freeze","all","active","completed","getTasks","tasks","getStatusFilter","_ref2","filters","status","filterInitialState","filterSlice","createSlice","name","initialState","reducers","setStatusFilter","filter","payload","actions","filterReducer","reducer","StatusFilter","dispatch","useDispatch","useSelector","handleFilterChange","_jsxs","wrapper","onClick","TaskCounter","reduce","acc","text","AppBar","section","title","tasksSlice","id","addTask","push","prepare","nanoid","deleteTask","index","findIndex","_ref3","splice","toggleCompleted","_ref4","task","tasksReducer","TaskForm","form","onSubmit","event","preventDefault","target","elements","value","reset","field","placeholder","Task","checkbox","checked","onChange","handleToggle","handleDelete","MdClose","size","TaskList","visibleTasks","getVisibleTasks","statusFilter","list","map","listItem","App","store","configureStore","ReactDOM","createRoot","document","getElementById","render","Provider"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,WAAa,2B,qBCAzDD,EAAOC,QAAU,CAAC,KAAO,0B,qBCAzBD,EAAOC,QAAU,CAAC,KAAO,uBAAuB,MAAQ,wB,qBCAxDD,EAAOC,QAAU,CAAC,KAAO,uBAAuB,SAAW,2B,qBCA3DD,EAAOC,QAAU,CAAC,UAAY,0B,qBCA9BD,EAAOC,QAAU,CAAC,QAAU,8B,2GCCrB,MAAMC,EAASC,IAAmB,IAAlB,SAAEC,GAAUD,EACjC,OAAOE,cAAA,QAAMC,UAAWC,IAAIC,UAAUJ,SAAEA,GAAgB,E,6BCAnD,MAAMK,EAASN,IAKf,IALgB,SACrBO,GAAW,EAAK,KAChBC,EAAO,SAAQ,SACfP,KACGQ,GACJT,EACC,OACEE,cAAA,UACEC,UAAWO,YAAKN,IAAIO,IAAK,CACvB,CAACP,IAAIQ,YAAaL,IAEpBC,KAAMA,KACFC,EAAUR,SAEbA,GACM,E,4BCjBN,MAAMY,EAAgBC,OAAOC,OAAO,CACzCC,IAAK,MACLC,OAAQ,SACRC,UAAW,cCJAC,EAAWnB,IAAA,IAAC,MAAEoB,GAAOpB,EAAA,OAAKoB,CAAK,EAE/BC,EAAkBC,IAAA,IAAGC,SAAS,OAAEC,IAAUF,EAAA,OAAKE,CAAM,E,WCClE,MAAMC,EAAqB,CACzBD,OAAQX,EAAcG,KAGlBU,EAAcC,YAAY,CAC9BC,KAAM,SACNC,aAAcJ,EACdK,SAAU,CAERC,gBAAgBC,EAAMhC,GAAgB,IAAd,QAAEiC,GAASjC,EACjCgC,EAAOR,OAASS,CAClB,MAIS,gBAAEF,GAAoBL,EAAYQ,QAClCC,EAAgBT,EAAYU,QCX5BC,EAAeA,KAC1B,MAAMC,EAAWC,cAGXP,EAASQ,YAAYnB,GAErBoB,EAAqBT,GAAUM,EAASP,EAAgBC,IAE9D,OACEU,eAAA,OAAKvC,UAAWC,IAAIuC,QAAQ1C,SAAA,CAC1BC,cAACI,EAAM,CACLC,SAAUyB,IAAWnB,EAAcG,IACnC4B,QAASA,IAAMH,EAAmB5B,EAAcG,KAAKf,SACtD,QAGDC,cAACI,EAAM,CACLC,SAAUyB,IAAWnB,EAAcI,OACnC2B,QAASA,IAAMH,EAAmB5B,EAAcI,QAAQhB,SACzD,WAGDC,cAACI,EAAM,CACLC,SAAUyB,IAAWnB,EAAcK,UACnC0B,QAASA,IAAMH,EAAmB5B,EAAcK,WAAWjB,SAC5D,gBAGG,E,qBChCH,MAAM4C,EAAcA,KAEzB,MAAMzB,EAAQoB,YAAYrB,IAGpB,OAAEF,EAAM,UAAEC,GAAcE,EAAM0B,QAClC,CAACC,EAAG/C,KAAqB,IAAnB,UAAEkB,GAAWlB,EAOjB,OANIkB,EACF6B,EAAI7B,WAAa,EAEjB6B,EAAI9B,QAAU,EAGT8B,CAAG,GAEZ,CAAE9B,OAAQ,EAAGC,UAAW,IAG1B,OACEwB,eAAA,OAAAzC,SAAA,CACEyC,eAAA,KAAGvC,UAAWC,IAAI4C,KAAK/C,SAAA,CAAC,WAASgB,KACjCyB,eAAA,KAAGvC,UAAWC,IAAI4C,KAAK/C,SAAA,CAAC,cAAYiB,OAChC,E,oBCtBH,MAAM+B,EAASA,IAElBP,eAAA,UAAQvC,UAAWC,IAAIuC,QAAQ1C,SAAA,CAC7ByC,eAAA,WAASvC,UAAWC,IAAI8C,QAAQjD,SAAA,CAC9BC,cAAA,MAAIC,UAAWC,IAAI+C,MAAMlD,SAAC,UAC1BC,cAAC2C,EAAW,OAEdH,eAAA,WAASvC,UAAWC,IAAI8C,QAAQjD,SAAA,CAC9BC,cAAA,MAAIC,UAAWC,IAAI+C,MAAMlD,SAAC,qBAC1BC,cAACmC,EAAY,U,6BCVrB,MAQae,EAAazB,YAAY,CACpCC,KAAM,QACNC,aAVwB,CACxB,CAAEwB,GAAI,EAAGL,KAAM,qBAAsB9B,WAAW,GAChD,CAAEmC,GAAI,EAAGL,KAAM,yBAA0B9B,WAAW,GACpD,CAAEmC,GAAI,EAAGL,KAAM,eAAgB9B,WAAW,GAC1C,CAAEmC,GAAI,EAAGL,KAAM,iBAAkB9B,WAAW,GAC5C,CAAEmC,GAAI,EAAGL,KAAM,qBAAsB9B,WAAW,IAMhDY,SAAU,CACRwB,QAAS,CAEPlB,QAAQhB,EAAKpB,GAAgB,IAAd,QAAEiC,GAASjC,EACxBoB,EAAMmC,KAAKtB,EACb,EACAuB,QAASR,IAAI,CACXf,QAAS,CACPoB,GAAII,cACJvC,WAAW,EACX8B,WAKNU,WAAWtC,EAAKE,GAAgB,IAAd,QAAEW,GAASX,EAC3B,MAAMqC,EAAQvC,EAAMwC,WAAUC,IAAA,IAAC,GAAER,GAAIQ,EAAA,OAAKR,IAAOpB,CAAO,IACxDb,EAAM0C,OAAOH,EAAO,EACtB,EAEAI,gBAAgB3C,EAAK4C,GAAgB,IAAd,QAAE/B,GAAS+B,EAChC,IAAK,MAAMC,KAAQ7C,EACb6C,EAAKZ,KAAOpB,IACdgC,EAAK/C,WAAa+C,EAAK/C,UAG7B,MAIS,QAAEoC,EAAO,WAAEI,EAAU,gBAAEK,GAAoBX,EAAWlB,QACtDgC,EAAed,EAAWhB,QCxC1B+B,EAAWA,KACtB,MAAM7B,EAAWC,cAWjB,OACEG,eAAA,QAAMvC,UAAWC,IAAIgE,KAAMC,SAVRC,IACnBA,EAAMC,iBACN,MAAMH,EAAOE,EAAME,OAEnBlC,EAASgB,EAAQc,EAAKK,SAASzB,KAAK0B,QAEpCN,EAAKO,OAAO,EAIsC1E,SAAA,CAChDC,cAAA,SACEC,UAAWC,IAAIwE,MACfpE,KAAK,OACLoB,KAAK,OACLiD,YAAY,uBAEd3E,cAACI,EAAM,CAACE,KAAK,SAAQP,SAAC,eACjB,E,4BCrBJ,MAAM6E,EAAO9E,IAAwC,IAArCiE,MAAM,GAAEZ,EAAE,KAAEL,EAAI,UAAE9B,IAAalB,EACpD,MAAMsC,EAAWC,cAIjB,OACEG,eAAA,OAAKvC,UAAWC,IAAIuC,QAAQ1C,SAAA,CAC1BC,cAAA,SACEM,KAAK,WACLL,UAAWC,IAAI2E,SACfC,QAAS9D,EACT+D,SAReC,IAAM5C,EAASyB,EAAgBV,MAUhDnD,cAAA,KAAGC,UAAWC,IAAI4C,KAAK/C,SAAE+C,IACzB9C,cAAA,UAAQC,UAAWC,IAAIO,IAAKiC,QAZXuC,IAAM7C,EAASoB,EAAWL,IAYOpD,SAChDC,cAACkF,IAAO,CAACC,KAAM,SAEb,E,qBCfV,MAaaC,EAAWA,KAEtB,MAIMC,EAnBgBC,EAACpE,EAAOqE,KAC9B,OAAQA,GACN,KAAK5E,EAAcI,OACjB,OAAOG,EAAMY,QAAOhC,IAAA,IAAC,UAAEkB,GAAWlB,EAAA,OAAMkB,CAAS,IAEnD,KAAKL,EAAcK,UACjB,OAAOE,EAAMY,QAAOV,IAAA,IAAC,UAAEJ,GAAWI,EAAA,OAAKJ,CAAS,IAElD,QACE,OAAOE,EACX,EASqBoE,CAJPhD,YAAYrB,GAELqB,YAAYnB,IAIjC,OACEnB,cAAA,MAAIC,UAAWC,IAAIsF,KAAKzF,SACT,OAAZsF,QAAY,IAAZA,OAAY,EAAZA,EAAcI,KAAI1B,GACjB/D,cAAA,MAAIC,UAAWC,IAAIwF,SAAS3F,SAC1BC,cAAC4E,EAAI,CAACb,KAAMA,KADoBA,EAAKZ,OAItC,EC9BIwC,EAAMA,IAEfnD,eAAC3C,EAAM,CAAAE,SAAA,CACLC,cAAC+C,EAAM,IACP/C,cAACiE,EAAQ,IACTjE,cAACoF,EAAQ,O,MCNR,MAAMQ,EAAQC,YAAe,CAClC3D,QAAS,CACPhB,MAAO8C,EACP3C,QAASY,KCDb6D,IAASC,WAAWC,SAASC,eAAe,SAASC,OACnDlG,cAACmG,IAAQ,CAACP,MAAOA,EAAM7F,SACrBC,cAAC2F,EAAG,M,oBCPRhG,EAAOC,QAAU,CAAC,QAAU,wBAAwB,QAAU,wBAAwB,MAAQ,sB,oBCA9FD,EAAOC,QAAU,CAAC,QAAU,sBAAsB,KAAO,mBAAmB,IAAM,kBAAkB,SAAW,uB","file":"static/js/main.2fbdce41.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3xaJM\",\"isSelected\":\"Button_isSelected__2JVMn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"TaskCounter_text__3WbH2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"TaskForm_form__1kzwH\",\"field\":\"TaskForm_field__8trCg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"TaskList_list__2xVr5\",\"listItem\":\"TaskList_listItem__XeAAN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Layout_container__1nNA4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"StatusFilter_wrapper__1VEdi\"};","import css from \"./Layout.module.css\";\n\nexport const Layout = ({ children }) => {\n  return <main className={css.container}>{children}</main>;\n};\n","import clsx from \"clsx\";\nimport css from \"./Button.module.css\";\n\nexport const Button = ({\n  selected = false,\n  type = \"button\",\n  children,\n  ...otherProps\n}) => {\n  return (\n    <button\n      className={clsx(css.btn, {\n        [css.isSelected]: selected\n      })}\n      type={type}\n      {...otherProps}\n    >\n      {children}\n    </button>\n  );\n};\n","// Filter status options\nexport const statusFilters = Object.freeze({\n  all: \"all\",\n  active: \"active\",\n  completed: \"completed\",\n});\n","export const getTasks = ({ tasks }) => tasks;\n\nexport const getStatusFilter = ({ filters: { status } }) => status;\n","import { statusFilters } from \"./constants\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst filterInitialState = {\n  status: statusFilters.all,\n};\n\nconst filterSlice = createSlice({\n  name: \"filter\",\n  initialState: filterInitialState,\n  reducers: {\n    // ({...filter, status: payload })\n    setStatusFilter(filter, { payload }) {\n      filter.status = payload;\n    },\n  },\n});\n\nexport const { setStatusFilter } = filterSlice.actions;\nexport const filterReducer = filterSlice.reducer;\n","import { Button } from \"components/Button/Button\";\nimport css from \"./StatusFilter.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// Import object with filter status options\nimport { statusFilters } from \"redux/constants\";\nimport { getStatusFilter } from \"redux/selectors\";\nimport { setStatusFilter } from \"redux/filterSlice\";\n\nexport const StatusFilter = () => {\n  const dispatch = useDispatch();\n\n  // Get current filter status from state of Redux\n  const filter = useSelector(getStatusFilter);\n\n  const handleFilterChange = filter => dispatch(setStatusFilter(filter));\n\n  return (\n    <div className={css.wrapper}>\n      <Button\n        selected={filter === statusFilters.all}\n        onClick={() => handleFilterChange(statusFilters.all)}\n      >\n        All\n      </Button>\n      <Button\n        selected={filter === statusFilters.active}\n        onClick={() => handleFilterChange(statusFilters.active)}\n      >\n        Active\n      </Button>\n      <Button\n        selected={filter === statusFilters.completed}\n        onClick={() => handleFilterChange(statusFilters.completed)}\n      >\n        Completed\n      </Button>\n    </div>\n  );\n};\n","import { useSelector } from \"react-redux\";\nimport css from \"./TaskCounter.module.css\";\nimport { getTasks } from \"redux/selectors\";\n\nexport const TaskCounter = () => {\n  // Get tasks list from Redux state\n  const tasks = useSelector(getTasks);\n\n  // Count active and completed tasks\n  const { active, completed } = tasks.reduce(\n    (acc, { completed }) => {\n      if (completed) {\n        acc.completed += 1;\n      } else {\n        acc.active += 1;\n      }\n\n      return acc;\n    },\n    { active: 0, completed: 0 }\n  );\n\n  return (\n    <div>\n      <p className={css.text}>Active: {active}</p>\n      <p className={css.text}>Completed: {completed}</p>\n    </div>\n  );\n};\n","import { StatusFilter } from \"components/StatusFilter/StatusFilter\";\nimport { TaskCounter } from \"components/TaskCounter/TaskCounter\";\nimport css from \"./AppBar.module.css\";\n\nexport const AppBar = () => {\n  return (\n    <header className={css.wrapper}>\n      <section className={css.section}>\n        <h2 className={css.title}>Tasks</h2>\n        <TaskCounter />\n      </section>\n      <section className={css.section}>\n        <h2 className={css.title}>Filter by status</h2>\n        <StatusFilter />\n      </section>\n    </header>\n  );\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"nanoid\";\n\nconst tasksInitialState = [\n  { id: 0, text: \"Learn HTML and CSS\", completed: true },\n  { id: 1, text: \"Get good at JavaScript\", completed: true },\n  { id: 2, text: \"Master React\", completed: false },\n  { id: 3, text: \"Discover Redux\", completed: false },\n  { id: 4, text: \"Build amazing apps\", completed: false },\n];\n\nexport const tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState: tasksInitialState,\n  reducers: {\n    addTask: {\n      // [...tasks, payload]\n      reducer(tasks, { payload }) {\n        tasks.push(payload);\n      },\n      prepare: text => ({\n        payload: {\n          id: nanoid(),\n          completed: false,\n          text,\n        },\n      }),\n    },\n    // tasks.filter(({ id }) => id !== payload)\n    deleteTask(tasks, { payload }) {\n      const index = tasks.findIndex(({ id }) => id === payload);\n      tasks.splice(index, 1);\n    },\n    // tasks.map(task => task.id !== payload ? task : { ...task, completed: !task.completed })\n    toggleCompleted(tasks, { payload }) {\n      for (const task of tasks) {\n        if (task.id === payload) {\n          task.completed = !task.completed;\n        }\n      }\n    },\n  },\n});\n\nexport const { addTask, deleteTask, toggleCompleted } = tasksSlice.actions;\nexport const tasksReducer = tasksSlice.reducer;\n","import { Button } from \"components/Button/Button\";\nimport css from \"./TaskForm.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { addTask } from \"redux/tasksSlice\";\n\nexport const TaskForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n\n    dispatch(addTask(form.elements.text.value));\n\n    form.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <input\n        className={css.field}\n        type=\"text\"\n        name=\"text\"\n        placeholder=\"Enter task text...\"\n      />\n      <Button type=\"submit\">Add task</Button>\n    </form>\n  );\n};\n","import { MdClose } from \"react-icons/md\";\nimport css from \"./Task.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteTask, toggleCompleted } from \"redux/tasksSlice\";\n\nexport const Task = ({ task: { id, text, completed } }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteTask(id));\n  const handleToggle = () => dispatch(toggleCompleted(id));\n\n  return (\n    <div className={css.wrapper}>\n      <input\n        type=\"checkbox\"\n        className={css.checkbox}\n        checked={completed}\n        onChange={handleToggle}\n      />\n      <p className={css.text}>{text}</p>\n      <button className={css.btn} onClick={handleDelete}>\n        <MdClose size={24} />\n      </button>\n    </div>\n  );\n};\n","import { Task } from \"components/Task/Task\";\nimport css from \"./TaskList.module.css\";\n// Import object with filter status options\nimport { statusFilters } from \"redux/constants\";\nimport { useSelector } from \"react-redux\";\nimport { getStatusFilter, getTasks } from \"redux/selectors\";\n\nconst getVisibleTasks = (tasks, statusFilter) => {\n  switch (statusFilter) {\n    case statusFilters.active:\n      return tasks.filter(({ completed }) => !completed);\n\n    case statusFilters.completed:\n      return tasks.filter(({ completed }) => completed);\n\n    default:\n      return tasks;\n  }\n};\n\nexport const TaskList = () => {\n  // Get tasks list from the Redux state\n  const tasks = useSelector(getTasks);\n  // Get current filter option from Redux state\n  const statusFilter = useSelector(getStatusFilter);\n  // Get list of tasks to be displayed\n  const visibleTasks = getVisibleTasks(tasks, statusFilter);\n\n  return (\n    <ul className={css.list}>\n      {visibleTasks?.map(task => (\n        <li className={css.listItem} key={task.id}>\n          <Task task={task} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { Layout } from \"components/Layout/Layout\";\nimport { AppBar } from \"components/AppBar/AppBar\";\nimport { TaskForm } from \"components/TaskForm/TaskForm\";\nimport { TaskList } from \"components/TaskList/TaskList\";\n\nexport const App = () => {\n  return (\n    <Layout>\n      <AppBar />\n      <TaskForm />\n      <TaskList />\n    </Layout>\n  );\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { tasksReducer } from \"./tasksSlice\";\nimport { filterReducer } from \"./filterSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    tasks: tasksReducer,\n    filters: filterReducer,\n  },\n});\n","import ReactDOM from \"react-dom/client\";\nimport { App } from \"components/App\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AppBar_wrapper__21lfN\",\"section\":\"AppBar_section__3Iy4s\",\"title\":\"AppBar_title__JfHv9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Task_wrapper__1Un4J\",\"text\":\"Task_text__7szr-\",\"btn\":\"Task_btn__2cnNo\",\"checkbox\":\"Task_checkbox__1kBaq\"};"],"sourceRoot":""}