{"version":3,"sources":["components/AppBar/AppBar.module.css","components/Task/Task.module.css","components/Button/Button.module.css","components/TaskCounter/TaskCounter.module.css","components/TaskForm/TaskForm.module.css","components/TaskList/TaskList.module.css","components/Layout/Layout.module.css","components/StatusFilter/StatusFilter.module.css","components/Layout/Layout.js","components/Button/Button.js","redux/constants.js","redux/selectors.js","redux/filterSlice.js","components/StatusFilter/StatusFilter.js","components/TaskCounter/TaskCounter.js","components/AppBar/AppBar.js","redux/tasksSlice.js","redux/operations.js","components/TaskForm/TaskForm.js","components/Task/Task.js","components/TaskList/TaskList.js","components/App.js","redux/store.js","index.js"],"names":["module","exports","Layout","_ref","children","_jsx","className","css","container","Button","selected","type","otherProps","clsx","btn","isSelected","statusFilters","Object","freeze","all","active","completed","selectTasks","state","tasks","items","selectIsLoading","isLoading","selectError","error","selectStatusFilter","filters","status","filterInitialState","filterSlice","createSlice","name","initialState","reducers","setStatusFilter","filter","payload","actions","filterReducer","reducer","StatusFilter","dispatch","useDispatch","useSelector","handleFilterChange","_jsxs","wrapper","onClick","TaskCounter","reduce","acc","text","AppBar","section","title","tasksReducer","extraReducers","builder","addCase","fetchTasks","fulfilled","addTask","_ref2","push","deleteTask","_ref3","_ref4","id","toggleCompleted","_ref5","index","findIndex","_ref6","splice","addMatcher","isAnyOf","pending","rejected","_ref7","axios","defaults","baseURL","createAsyncThunk","async","_","thunkAPI","get","data","rejectWithValue","message","post","delete","concat","put","TaskForm","form","onSubmit","event","preventDefault","target","elements","value","reset","field","placeholder","Task","task","checkbox","checked","onChange","handleToggle","handleDelete","MdClose","size","TaskList","visibleTasks","getVisibleTasks","statusFilter","list","map","listItem","App","useEffect","store","configureStore","ReactDOM","createRoot","document","getElementById","render","Provider"],"mappings":"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","file":"static/js/main.b7c0c327.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AppBar_wrapper__21lfN\",\"section\":\"AppBar_section__3Iy4s\",\"title\":\"AppBar_title__JfHv9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Task_wrapper__1Un4J\",\"text\":\"Task_text__7szr-\",\"btn\":\"Task_btn__2cnNo\",\"checkbox\":\"Task_checkbox__1kBaq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3xaJM\",\"isSelected\":\"Button_isSelected__2JVMn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"TaskCounter_text__3WbH2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"TaskForm_form__1kzwH\",\"field\":\"TaskForm_field__8trCg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"TaskList_list__2xVr5\",\"listItem\":\"TaskList_listItem__XeAAN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Layout_container__1nNA4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"StatusFilter_wrapper__1VEdi\"};","import css from \"./Layout.module.css\";\n\nexport const Layout = ({ children }) => {\n  return <main className={css.container}>{children}</main>;\n};\n","import clsx from \"clsx\";\nimport css from \"./Button.module.css\";\n\nexport const Button = ({\n  selected = false,\n  type = \"button\",\n  children,\n  ...otherProps\n}) => {\n  return (\n    <button\n      className={clsx(css.btn, {\n        [css.isSelected]: selected\n      })}\n      type={type}\n      {...otherProps}\n    >\n      {children}\n    </button>\n  );\n};\n","// Filter status options\nexport const statusFilters = Object.freeze({\n  all: \"all\",\n  active: \"active\",\n  completed: \"completed\",\n});\n","export const selectTasks = state => state.tasks.items;\nexport const selectIsLoading = state => state.tasks.isLoading;\nexport const selectError = state => state.tasks.error;\n\nexport const selectStatusFilter = state => state.filters.status;\n","import { statusFilters } from \"./constants\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst filterInitialState = {\n  status: statusFilters.all,\n};\n\nconst filterSlice = createSlice({\n  name: \"filter\",\n  initialState: filterInitialState,\n  reducers: {\n    // ({...filter, status: payload })\n    setStatusFilter(filter, { payload }) {\n      filter.status = payload;\n    },\n  },\n});\n\nexport const { setStatusFilter } = filterSlice.actions;\nexport const filterReducer = filterSlice.reducer;\n","import { Button } from \"components/Button/Button\";\nimport css from \"./StatusFilter.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// Import object with filter status options\nimport { statusFilters } from \"redux/constants\";\nimport { selectStatusFilter } from \"redux/selectors\";\nimport { setStatusFilter } from \"redux/filterSlice\";\n\nexport const StatusFilter = () => {\n  const dispatch = useDispatch();\n\n  // Get current filter status from state of Redux\n  const filter = useSelector(selectStatusFilter);\n\n  const handleFilterChange = filter => dispatch(setStatusFilter(filter));\n\n  return (\n    <div className={css.wrapper}>\n      <Button\n        selected={filter === statusFilters.all}\n        onClick={() => handleFilterChange(statusFilters.all)}\n      >\n        All\n      </Button>\n      <Button\n        selected={filter === statusFilters.active}\n        onClick={() => handleFilterChange(statusFilters.active)}\n      >\n        Active\n      </Button>\n      <Button\n        selected={filter === statusFilters.completed}\n        onClick={() => handleFilterChange(statusFilters.completed)}\n      >\n        Completed\n      </Button>\n    </div>\n  );\n};\n","import { useSelector } from \"react-redux\";\nimport css from \"./TaskCounter.module.css\";\nimport { selectTasks } from \"redux/selectors\";\n\nexport const TaskCounter = () => {\n  // Get tasks list from Redux state\n  const tasks = useSelector(selectTasks);\n\n  // Count active and completed tasks\n  const { active, completed } = tasks.reduce(\n    (acc, { completed }) => {\n      if (completed) {\n        acc.completed += 1;\n      } else {\n        acc.active += 1;\n      }\n\n      return acc;\n    },\n    { active: 0, completed: 0 }\n  );\n\n  return (\n    <div>\n      <p className={css.text}>Active: {active}</p>\n      <p className={css.text}>Completed: {completed}</p>\n    </div>\n  );\n};\n","import { StatusFilter } from \"components/StatusFilter/StatusFilter\";\nimport { TaskCounter } from \"components/TaskCounter/TaskCounter\";\nimport css from \"./AppBar.module.css\";\n\nexport const AppBar = () => {\n  return (\n    <header className={css.wrapper}>\n      <section className={css.section}>\n        <h2 className={css.title}>Tasks</h2>\n        <TaskCounter />\n      </section>\n      <section className={css.section}>\n        <h2 className={css.title}>Filter by status</h2>\n        <StatusFilter />\n      </section>\n    </header>\n  );\n};\n","import { createSlice, isAnyOf } from \"@reduxjs/toolkit\";\nimport { addTask, deleteTask, fetchTasks, toggleCompleted } from \"./operations\";\n\nexport const tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState: {\n    items: [],\n    isLoading: false,\n    error: null,\n  },\n  extraReducers: builder => {\n    builder\n      // Fetch tasks\n      .addCase(fetchTasks.fulfilled, (state, { payload }) => {\n        state.isLoading = false;\n        state.error = null;\n        state.items = payload;\n      })\n\n      // Create task\n      .addCase(addTask.fulfilled, (state, { payload }) => {\n        state.isLoading = false;\n        state.error = null;\n        state.items.push(payload);\n      })\n\n      // Delete task\n      .addCase(deleteTask.fulfilled, (state, { payload }) => {\n        state.isLoading = false;\n        state.error = null;\n        state.items = state.items.filter(({ id }) => id !== payload.id);\n      })\n\n      // Toggle complited task\n      .addCase(toggleCompleted.fulfilled, (state, { payload }) => {\n        state.isLoading = false;\n        state.error = null;\n        const index = state.items.findIndex(({ id }) => id === payload.id);\n        state.items.splice(index, 1, payload);\n      })\n\n      // Handle Pending request\n      .addMatcher(\n        isAnyOf(\n          fetchTasks.pending,\n          addTask.pending,\n          deleteTask.pending,\n          toggleCompleted.pending\n        ),\n        state => {\n          state.isLoading = true;\n        }\n      )\n\n      // Handle Rejected request\n      .addMatcher(\n        isAnyOf(\n          fetchTasks.rejected,\n          addTask.rejected,\n          deleteTask.rejected,\n          toggleCompleted.rejected\n        ),\n        (state, { payload }) => {\n          state.isLoading = false;\n          state.error = payload;\n        }\n      );\n  },\n});\n\nexport const tasksReducer = tasksSlice.reducer;\n","import axios from \"axios\";\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { tasksReducer } from \"./tasksSlice\";\n\naxios.defaults.baseURL = \"https://65ab32c3fcd1c9dcffc62bda.mockapi.io/\";\n\nexport const fetchTasks = createAsyncThunk(\n  tasksReducer.name + \"/fetchAll\",\n  async (_, thunkAPI) => {\n    try {\n      const response = await axios.get(\"tasks\");\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addTask = createAsyncThunk(\n  tasksReducer.name + \"/addTask\",\n  async (text, thunkAPI) => {\n    try {\n      const response = await axios.post(\"tasks\", { text, completed: false });\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const deleteTask = createAsyncThunk(\n  tasksReducer.name + \"/deleteTask\",\n  async (id, thunkAPI) => {\n    try {\n      const response = await axios.delete(`tasks/${id}`);\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const toggleCompleted = createAsyncThunk(\n  tasksReducer.name + \"/toggleCompleted\",\n  async ({ id, completed }, thunkAPI) => {\n    try {\n      const response = await axios.put(`tasks/${id}`, {\n        completed: !completed,\n      });\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n","import { Button } from \"components/Button/Button\";\nimport css from \"./TaskForm.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { addTask } from \"redux/operations\";\n\nexport const TaskForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n\n    dispatch(addTask(form.elements.text.value));\n\n    form.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <input\n        className={css.field}\n        type=\"text\"\n        name=\"text\"\n        placeholder=\"Enter task text...\"\n      />\n      <Button type=\"submit\">Add task</Button>\n    </form>\n  );\n};\n","import { MdClose } from \"react-icons/md\";\nimport css from \"./Task.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteTask, toggleCompleted } from \"redux/operations\";\n\nexport const Task = ({ task: { id, text, completed } }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteTask(id));\n  const handleToggle = () => dispatch(toggleCompleted({ id, completed }));\n\n  return (\n    <div className={css.wrapper}>\n      <input\n        type=\"checkbox\"\n        className={css.checkbox}\n        checked={completed}\n        onChange={handleToggle}\n      />\n      <p className={css.text}>{text}</p>\n      <button className={css.btn} onClick={handleDelete}>\n        <MdClose size={24} />\n      </button>\n    </div>\n  );\n};\n","import { statusFilters } from \"redux/constants\";\nimport { useSelector } from \"react-redux\";\n\nimport { Task } from \"components/Task/Task\";\nimport { selectStatusFilter, selectTasks } from \"redux/selectors\";\nimport css from \"./TaskList.module.css\";\n\nconst getVisibleTasks = (tasks, statusFilter) => {\n  switch (statusFilter) {\n    case statusFilters.active:\n      return tasks.filter(({ completed }) => !completed);\n\n    case statusFilters.completed:\n      return tasks.filter(({ completed }) => completed);\n\n    default:\n      return tasks;\n  }\n};\n\nexport const TaskList = () => {\n  const tasks = useSelector(selectTasks);\n  const statusFilter = useSelector(selectStatusFilter);\n  const visibleTasks = getVisibleTasks(tasks, statusFilter);\n\n  return (\n    <ul className={css.list}>\n      {visibleTasks?.map(task => (\n        <li className={css.listItem} key={task.id}>\n          <Task task={task} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { Layout } from \"components/Layout/Layout\";\nimport { AppBar } from \"components/AppBar/AppBar\";\nimport { TaskForm } from \"components/TaskForm/TaskForm\";\nimport { TaskList } from \"components/TaskList/TaskList\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { fetchTasks } from \"redux/operations\";\nimport { selectError, selectIsLoading } from \"redux/selectors\";\n\nexport const App = () => {\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <Layout>\n      <AppBar />\n      <TaskForm />\n      {isLoading && !error && <p>Request in progress...</p>}\n      {!isLoading && error && <p>{error}</p>}\n      <TaskList />\n    </Layout>\n  );\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { tasksReducer } from \"./tasksSlice\";\nimport { filterReducer } from \"./filterSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    tasks: tasksReducer,\n    filters: filterReducer,\n  },\n});\n","import ReactDOM from \"react-dom/client\";\nimport { App } from \"components/App\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n"],"sourceRoot":""}